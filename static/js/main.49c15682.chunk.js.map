{"version":3,"sources":["Components/Camera/Camera.Component.tsx","Camera.Component.Service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Camera","videoElement","useRef","document","createElement","getVideo","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","oGetUserMedia","video","videoObject","stream","error","mediaDevices","MODEL_URL","Promise","all","faceApi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","loadModels","then","result","setTimeout","canvas","current","children","className","context","getContext","translate","width","height","scale","console","log","prepend","displaySize","videoWidth","videoHeight","setInterval","a","withFaceLandmarks","withFaceExpressions","detections","resizedDetections","clearRect","drawDetections","drawFaceLandmarks","drawFaceExpressions","undefined","expressions","length","hasOwnProperty","happy","createDetection","useState","srcObject","useEffect","Container","maxWidth","ref","autoPlay","App","history","createHistory","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oXAyDeA,MAnDf,WACE,IAAMC,EAAeC,iBAAuBC,SAASC,cAAc,QAC7DC,EAAW,WACTC,UAAUC,cAEVD,UAAUC,aACRD,UAAUC,cACTD,UAAkBE,oBAClBF,UAAkBG,iBAClBH,UAAkBI,gBAClBJ,UAAkBK,cAErBL,UAAUC,aACR,CAAEK,OAAO,GACTC,EAAYC,OACZD,EAAYE,QAEPT,UAAUU,cAAgBV,UAAUU,aAAaT,cACxDD,UAAUU,aAAaT,aACrB,CAAEK,OAAO,ICvBd,WACL,IAAMK,EACJ,mGACF,OAAOC,QAAQC,IAAI,CACjBC,IAAkCH,GAClCG,IAAkCH,GAClCG,IAAiCH,GACjCG,IAAaC,iBAAiBC,YAAYL,GAC1CG,IAAaG,kBAAkBD,YAAYL,GAC3CG,IAAaI,mBAAmBF,YAAYL,GAC5CG,IAAaK,kBAAkBH,YAAYL,KDmB3CS,GAAaC,MAAK,SAACC,GACjBC,YAAW,kBChBc,SAACjB,GAC9B,IAAMkB,EAASV,IACbR,EAAMmB,QAAQC,SAAS,IAEzBF,EAAOG,UAAY,SACnB,IAAMC,EAAUJ,EAAOK,WAAW,MAClCD,GAAWA,EAAQE,UAAUN,EAAOO,MAAQ,EAAGP,EAAOQ,OAAS,GAC/DJ,GAAWA,EAAQK,OAAO,EAAG,GAC7BC,QAAQC,IAAIP,GACZtB,EAAMmB,QAAQW,QAAQZ,GACtB,IAAMa,EAAc,CAClBN,MAAOzB,EAAMmB,QAAQC,SAAS,GAAGY,WACjCN,OAAQ1B,EAAMmB,QAAQC,SAAS,GAAGa,aAEpCzB,IAAwBU,EAAQa,GAChCG,YAAW,sBAAC,8BAAAC,EAAA,sEACe3B,IAErBR,EAAMmB,QAAQC,SAAS,GACvB,IAAIZ,KAEL4B,oBACAC,sBAPO,OACJC,EADI,OAQJC,EAAoB/B,IAAsB8B,EAAYP,GAE5DT,GAAWA,EAAQkB,UAAU,EAAG,EAAGtB,EAAOO,MAAOP,EAAOQ,QACxDlB,IAAaiC,eAAevB,EAAQqB,GACpC/B,IAAakC,kBAAkBxB,EAAQqB,GACvC/B,IAAamC,oBAAoBzB,EAAQqB,GAGvCD,EAAW,SACkBM,GAA7BN,EAAW,GAAGO,aACdP,EAAWQ,QAAU,GACrBR,EAAW,GAAGS,eAAe,gBAC7BT,EAAW,GAAGO,YAAYG,MAAQ,KAElCpB,QAAQC,IAAI,UAtBJ,2CAwBT,KDvBkBoB,CAAgB5D,KAAe,SA1BpC,EA8BM6D,mBAGnB,CACDhD,OAAQ,SAACA,GAAD,OACJb,EAAa8B,QACZC,SAAS,GAAwB+B,UAAYjD,GAClDC,MAAO,kBAAMyB,QAAQC,IAAI,WAPpB5B,EA9BS,oBA0ChB,OAFAmD,qBAAU,kBAAM3D,MAAY,IAG1B,kBAAC4D,EAAA,EAAD,CAAWC,SAAU,MACnB,yBAAKC,IAAKlE,GACR,2BAAOmE,UAAU,O,yBE/BVC,MAbf,WACE,OACE,kBAAC,IAAD,CAAQC,QAASC,IAAc,CAAEC,SAAUC,kCACzC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5E,MCEnB6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjF,SAASkF,eAAe,SDiIpB,kBAAmB/E,WACrBA,UAAUgF,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAA3E,GACLyB,QAAQzB,MAAMA,EAAM4E,c","file":"static/js/main.49c15682.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { loadModels, createDetection } from \"../../Camera.Component.Service\";\r\n\r\ninterface Props {}\r\n\r\nfunction Camera() {\r\n  const videoElement = useRef<HTMLDivElement>(document.createElement(\"div\"));\r\n  const getVideo = () => {\r\n      if (navigator.getUserMedia) {\r\n\r\n          navigator.getUserMedia =\r\n            navigator.getUserMedia ||\r\n            (navigator as any).webkitGetUserMedia ||\r\n            (navigator as any).mozGetUserMedia ||\r\n            (navigator as any).msGetUserMedia ||\r\n            (navigator as any).oGetUserMedia;\r\n      \r\n          navigator.getUserMedia(\r\n            { video: true },\r\n            videoObject.stream,\r\n            videoObject.error\r\n          );\r\n      } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n          navigator.mediaDevices.getUserMedia(\r\n            { video: true }\r\n            // ,\r\n            // videoObject.stream,\r\n            // videoObject.error\r\n          )\r\n      }\r\n    loadModels().then((result: any) => {\r\n      setTimeout(() => createDetection(videoElement), 2000);\r\n    });\r\n  };\r\n\r\n  const [videoObject] = useState<{\r\n    stream: NavigatorUserMediaSuccessCallback;\r\n    error: NavigatorUserMediaErrorCallback;\r\n  }>({\r\n    stream: (stream: MediaStream) =>\r\n      ((videoElement.current\r\n        .children[0] as HTMLVideoElement).srcObject = stream),\r\n    error: () => console.log(\"erro\"),\r\n  });\r\n\r\n  useEffect(() => getVideo(), []);\r\n\r\n  return (\r\n    <Container maxWidth={\"sm\"}>\r\n      <div ref={videoElement}>\r\n        <video autoPlay={true}></video>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Camera;\r\n","import * as faceApi from \"face-api.js\";\r\n\r\nexport function loadModels() {\r\n  const MODEL_URL =\r\n    \"https://cors-anywhere.herokuapp.com/raw.githack.com/justadudewhohacks/face-api.js/master/weights\";\r\n  return Promise.all([\r\n    faceApi.loadTinyFaceDetectorModel(MODEL_URL),\r\n    faceApi.loadFaceLandmarkTinyModel(MODEL_URL),\r\n    faceApi.loadFaceRecognitionModel(MODEL_URL),\r\n    faceApi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\r\n    faceApi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\r\n    faceApi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\r\n    faceApi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\r\n  ]);\r\n}\r\n\r\nexport const createDetection = (video: any) => {\r\n  const canvas = faceApi.createCanvasFromMedia(\r\n    video.current.children[0] as HTMLVideoElement\r\n  );\r\n  canvas.className = \"canvas\";\r\n  const context = canvas.getContext(\"2d\");\r\n  context && context.translate(canvas.width / 2, canvas.height / 2);\r\n  context && context.scale(-1, 1);\r\n  console.log(context)\r\n  video.current.prepend(canvas);\r\n  const displaySize = {\r\n    width: video.current.children[1].videoWidth,\r\n    height: video.current.children[1].videoHeight,\r\n  };\r\n  faceApi.matchDimensions(canvas, displaySize);\r\n  setInterval(async () => {\r\n    const detections = await faceApi\r\n      .detectAllFaces(\r\n        video.current.children[1] as HTMLVideoElement,\r\n        new faceApi.TinyFaceDetectorOptions()\r\n      )\r\n      .withFaceLandmarks()\r\n      .withFaceExpressions();\r\n    const resizedDetections = faceApi.resizeResults(detections, displaySize);\r\n\r\n    context && context.clearRect(0, 0, canvas.width, canvas.height);\r\n    faceApi.draw.drawDetections(canvas, resizedDetections);\r\n    faceApi.draw.drawFaceLandmarks(canvas, resizedDetections);\r\n    faceApi.draw.drawFaceExpressions(canvas, resizedDetections);\r\n\r\n    if (\r\n      detections[0] &&\r\n      detections[0].expressions != undefined &&\r\n      detections.length > -1 &&\r\n      detections[0].hasOwnProperty(\"expressions\") &&\r\n      detections[0].expressions.happy > 0.99\r\n    ) {\r\n      console.log(\"sorriu\");\r\n    }\r\n  }, 100);\r\n};\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Camera from './Components/Camera/Camera.Component';\nimport { Router, Route } from 'react-router-dom';\nimport createHistory from 'history/createBrowserHistory';\n\nfunction App() {\n  return (\n    <Router history={createHistory({ basename: process.env.PUBLIC_URL })}>\n      <Route exact path=\"/\" component={Camera} />\n    {/* <div className=\"route\">\n      <Route exact path=\"/photo\" component={ImageInput} />\n      <Route exact path=\"/camera\" component={VideoInput} />\n    </div> */}\n      {/* <Camera /> */}\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}